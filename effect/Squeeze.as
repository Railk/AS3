/*** SqueezeEffect by Grant Skinner. Aug 8, 2006* Visit www.gskinner.com/blog for documentation, updates and more free code.** You may distribute and modify this code freely.*//*GDS: This is a test case I built to see if it could be done. You'll probably want to cleanthe code up, and maybe fix up the gradient if you're planning to use it in a project.SM: Updated to AS3, code could still use a bit of clean up, a lot of magic numbers in there.*/package railk.as3.effect {		import flash.display.Sprite;	import flash.filters.DisplacementMapFilter;	import flash.filters.DropShadowFilter;	import flash.filters.BlurFilter;	import flash.display.BitmapData;	import flash.geom.Point;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;		public class Squeeze extends Sprite {				private var _count:int = 0;		private var _pt:Point = new Point();		private var _dmBmp:BitmapData;		private var _blurF:BlurFilter;		private var _dmf:DisplacementMapFilter;		private var _dsf:DropShadowFilter;				//clips on stage		public var clip:MovieClip;		public var map:MovieClip;		public var click_mc:MovieClip;				public function Squeeze():void {			click_mc.addEventListener(MouseEvent.CLICK, reset);			buttonMode = true;			draw();			//reset();		}				private function draw():void {			_dmBmp = new BitmapData(500,350,false,0x808080);			_dmBmp.draw(map);			_blurF = new BlurFilter(64,64,2);						// can't use in latest player drops, because of a bug in the blur filter:			//_dmBmp.applyFilter(dmBmp,dmBmp.rectangle,pt,blurF);			//attachBitmap(_dmBmp,2);						_dmf = new DisplacementMapFilter(_dmBmp,_pt,1,1,2040,0,"color",0,0);			_dsf = new DropShadowFilter(8,45,0,0.4,16,16,1,2);			clip.filters = [_dmf,_dsf];		}				private function slideDown(e:Event):void {			_count = Math.min(100,_count+3);			clip.y = getEaseOut(Math.min(100,_count)/100,2)*350-350;			_dmf.scaleX = 2040 - getEaseOut(_count/100,1.5)*2040;			if (_count == 100) {				clip.y = 0;				clip.filters = [_dsf];				removeEventListener(Event.ENTER_FRAME, slideDown);			} else {				applyDisplacement();			}		}				private function getEaseOut(p_pos:Number,p_pow:Number):Number {			return 1-Math.pow(1-Math.sin(p_pos*(Math.PI/2)),(isNaN(p_pow))?1:p_pow);		}				private function applyDisplacement():void {			_pt.y = -(clip.y + 30);			_dmf.mapPoint = _pt;			clip.filters = [_dmf,_dsf]		}				private function reset(e:MouseEvent = null):void {			_count = 0;			addEventListener(Event.ENTER_FRAME, slideDown);		}	}}