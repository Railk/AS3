package railk.as3.physics {	import flash.geom.Point;	public class Trailer extends Flocker	{			// Trail, array of points.		internal var _trail:Array = new Array();				// Number of points in trail.		internal var _trailLength:uint = 0;				// Callback used to draw the trail.		internal var drawCallback:Function;				public function Trailer($drawCallback:Function, $x:Number = 0, $y:Number = 0, $trailLength:uint = 7):void {			// Construct superclass with required arguments.			super($x, $y);						// Assign callback.			drawCallback = $drawCallback;						// Construct all of the Points in the trail once.			// This way, in update() we simply update the position values of each Point,			// instead of deleting and reconstructing Points every time update() is called.			addTrail(x, y, $trailLength);		}				// Accessors for trailLength.		public function get trailLength():uint {			return _trailLength;		}		public function set trailLength($trailLength:uint):void {			var i:int;			var difference:int = Math.abs(_trailLength - $trailLength);			trace(difference);			if($trailLength < _trailLength){				// Trim trail.				for(i = 0; i < difference; i++){					_trail.shift();				}				_trailLength = $trailLength;			}else if($trailLength > _trailLength){				// Extend trail.				addTrail(_trail[_trail.length - 1].x, _trail[_trail.length - 1].y, difference);			}					}				private function addTrail($initX:Number, $initY:Number, $length:uint):void {			var i:int;			var trailX:Number = $initX;			var trailY:Number = $initY;			for(i = 0; i < $length; i++){				// Unshift to add the points to the beginning of the array,				// so that the end is the current position and the the front is the end of the trail.				_trail.unshift(new Point(trailX, trailY));				trailX += int(Math.random() * 5 - 2.5);				trailY += int(Math.random() * 5 - 2.5);			}			_trailLength = $length;		}				override public function update():void {			// Update position with inherited method.			super.update();			var i:int;			// Update trail values by shifting all values to the left.			for(i = 1; i < _trail.length; i++){				_trail[i - 1].x = _trail[i].x;				_trail[i - 1].y = _trail[i].y;			}			// Update the end of the trail with the current position.			_trail[_trail.length - 1].x = x;			_trail[_trail.length - 1].y = y;		}				public function draw():void {			var i:int;			// Draw from the end to the front of the trail array.			for(i = _trail.length - 1; i >= 0; i--){				drawCallback(_trail[i].x, _trail[i].y);			}		}			}}